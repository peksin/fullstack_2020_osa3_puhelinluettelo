{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","Person","person","handleDeletePerson","name","number","type","onClick","Numbers","persons","showAll","newFilter","personsToShow","filter","toLowerCase","includes","map","key","Filter","handleNewFilter","value","onChange","PersonForm","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setShowAll","notificationMessage","setNotificationMessage","updateFromDatabase","personService","allPersons","console","log","useEffect","event","target","preventDefault","nameObject","nimet","findIndex","string","returnedPerson","concat","setTimeout","window","confirm","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04a29b16.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n// GET-pyynto\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data) // palauttaa datan\n}\n\n// POST-pyynto\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data) // palauttaa datan\n}\n\n\n// PUT-pyynto\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data) // palauttaa datan\n}\n\n\n// DELETE-pyynto, delete ei kelvannut nimeksi syysta tai toisesta\n// krhm ja jos luki tehtavanannon loppuun niin siellahan se sanottiin\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data) // palauttaa datan\n}\n\nexport default {getAll, create, update, remove}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\n\n// Yksi yhteystieto\nconst Person = ({ person, handleDeletePerson }) => {\n  return (\n    <>\n      {person.name} {person.number} <button type=\"delete\"\n                                            onClick={() => {handleDeletePerson(person.id, person.name)}}\n                                            >delete</button> <br/>\n    </>\n  )\n}\n\n\n// Kaikki yhteystiedot\nconst Numbers = ({ persons, showAll, newFilter, handleDeletePerson }) => {\n\n  const personsToShow = showAll\n  ? persons\n  : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n  return (\n    <>\n      {personsToShow.map((person) => \n        <Person key={person.name} person={person} handleDeletePerson={handleDeletePerson}/>)}\n    </>\n  )\n}\n\n\n// Filtteri\nconst Filter = ({ handleNewFilter, newFilter }) => (\n    <form>\n    <div>\n      filter shown with <input\n        value={newFilter}\n        onChange={handleNewFilter} />\n    </div>\n  </form>\n)\n\n\n// Henkilon lisays\nconst PersonForm = ({addName, newName, handleNameChange, newNumber, handleNumberChange}) => {\n  return (\n    <div>\n      <form onSubmit={addName}>\n      <div>\n        name: <input \n          value={newName}\n          onChange={handleNameChange}/>\n      </div>\n      <div>\n        number: <input\n          value={newNumber}\n          onChange={handleNumberChange}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n    </div>\n  )\n}\n\n\n// Juurikomponentti\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [ notificationMessage, setNotificationMessage] = useState(null)\n\n  const updateFromDatabase = () => {\n    personService\n      .getAll()\n      .then(allPersons => {\n        console.log('Hakee tietokannasta...')\n        console.log(allPersons)\n        setPersons(allPersons)\n      })\n  }\n\n  useEffect(updateFromDatabase, [])\n\n\n\n  // kasittelee vain lomakkeen kentan muutosta\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewFilter = (event) => {\n    setShowAll(false)\n    setNewFilter(event.target.value)\n  }\n\n  /* taitaa olla makuasia etta poistaako suoraan tietokannasta ja hakee tuoreen version vanhan\n  STATEn paalle vai poistaako nykyisesta ja POSTaa uuden version tietokantaan vanhan paalle? */\n  const handleDeletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n      .remove(id)\n      .then(response => {\n        updateFromDatabase()\n        setNotificationMessage(`Deleted ${name}`)\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setNotificationMessage(`Information of ${name} has already been removed from server`)\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n        updateFromDatabase()\n      })\n    }\n  }\n\n  // hoitaa puhelinnumeron lisayksen\n  const addName = (event) => {\n    event.preventDefault()\n    // luodaan olio uutta puhelinnumeroa varten\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    // etsitaan annettua nimea jo tallennetuista\n    const nimet = persons.map(person => person.name)\n    if (nimet.findIndex((string) => string === newName) === -1) {\n      // tietokannasta ei loytynyt annetun nimista\n      personService.create(nameObject).then(returnedPerson => {\n      setPersons(persons.concat(returnedPerson))\n      setNotificationMessage(`Added ${newName}`)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n      })\n    } else if (window.confirm(`${nameObject.name} is already added to phonebook, replace\n    the old number with a new one?`)) {\n      personService\n      .update(persons[nimet.findIndex((string) => string === newName)].id, nameObject)\n      .then(() => { \n        updateFromDatabase()\n      setNotificationMessage(`Updated ${newName}`)\n      setTimeout(() => {\n        setNotificationMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setNotificationMessage(`Information of ${newName} has already been removed from server`)\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n        updateFromDatabase()\n      })\n    }\n    \n    \n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={notificationMessage}/>\n\n      <Filter \n        newFilter={newFilter} \n        handleNewFilter={handleNewFilter} />\n\n      <h2>Add a new</h2>\n\n      <PersonForm \n        addName={addName}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n        />\n\n      <h2>Numbers</h2>\n\n      <Numbers persons={persons} showAll={showAll} \n                newFilter={newFilter} handleDeletePerson={handleDeletePerson}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}